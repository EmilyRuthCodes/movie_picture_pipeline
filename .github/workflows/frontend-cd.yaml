name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  REACT_APP_MOVIE_API_URL: http://localhost:5000
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linter
        working-directory: frontend
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run Tests
        working-directory: frontend
        run: CI=true npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    env:
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker image
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${REACT_APP_MOVIE_API_URL} -t $ECR_REPOSITORY:$IMAGE_TAG frontend

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          chmod +x kustomize
          sudo mv kustomize /usr/local/bin/

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Debug kubeconfig contents and permissions
        run: |
          echo "KUBECONFIG path: $HOME/.kube/config"
          ls -l $HOME/.kube/config
          cat $HOME/.kube/config
          echo "Current context:"
          kubectl config current-context
        env:
          KUBECONFIG: $HOME/.kube/config

      - name: Check cluster info
        env:
          KUBECONFIG: $HOME/.kube/config
        run: kubectl cluster-info

      - name: Set kustomize image tag
        run: |
          cd frontend/k8s
          kustomize edit set image frontend=${ECR_REPOSITORY}:${IMAGE_TAG}

      - name: Deploy to EKS
        env:
          KUBECONFIG: $HOME/.kube/config
        run: |
          cd frontend/k8s
          kustomize build | kubectl apply --validate=false -f -
